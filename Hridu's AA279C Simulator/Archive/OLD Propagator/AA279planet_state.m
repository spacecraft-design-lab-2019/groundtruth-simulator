function [O_r_P__heli, heli_v_P__heli] = AA279planet_state(planet_id, jd)% Returns heliocentric position and velocity of planet at given time%% AA279 Function Library% Last modified: 22 April 2016 by Andrew K. Barrows% Physical constants from http://ssd.jpl.nasa.gov/horizons.cgi  Feb 2014km_per_au = 149597870.700; % [km/AU]musun     = 1.3271244004193938e11; % [km^3/sec^2]% Get data for selected planet[j2000_elements, rates] = AA279j2000_planetary_elements(planet_id);% Find elements at given timeelements = j2000_elements + rates*(jd - 2451545)/36525;a = elements(1)*km_per_au; % semi-major axisecc = elements(2); % eccentricityp = a*(1 - ecc*ecc); % [km]inc = elements(3); % [deg] inclination (assume stays in [-90 +90] range)LAN = elements(4); % [deg] longitude of ascending nodewhile LAN >= 360.0    LAN = LAN - 360.0; endwhile LAN < 0.0    LAN = LAN + 360.0;endomega_bar = elements(5); % [deg] longitude of perihelionwhile omega_bar >= 360.0    omega_bar = omega_bar - 360.0; endwhile omega_bar < 0.0    omega_bar = omega_bar + 360.0;endL = elements(6); % [deg] mean longitudewhile L >= 360.0    L = L - 360.0; endwhile L < 0.0    L = L + 360.0;end  omega = omega_bar - LAN; % [deg] argument of perihelionwhile omega >= 360.0    omega = omega - 360.0; endwhile omega < 0.0    omega = omega + 360.0;end M = L - omega_bar; % [deg] mean anomalywhile M >= 360.0    M = M - 360.0; endwhile M < 0.0    M = M + 360.0;end % Find eccentric anomaly by solving Kepler's equationE = AA279solve_kepler(M*pi/180, ecc, 1e-10); % [rad]% Find position and velocity of planet in perifocal coordinatessinnu = (sin(E)*sqrt(1.0-ecc*ecc))/(1.0-ecc*cos(E));cosnu = (cos(E)-ecc)/(1.0-ecc*cos(E));r = p/(1.0+ecc*cosnu); % Trajectory EquationO_r_P__peri = [r*cosnu; r*sinnu; 0.0];sqrtmuoverp = sqrt(musun/p);peri_v_P__peri = [-sqrtmuoverp*sinnu; sqrtmuoverp*(ecc+cosnu); 0.0];      % Convert perifocal coordinates to heliocentric coordinatessinLAN = sin(LAN*pi/180.0);cosLAN = cos(LAN*pi/180.0);sininc = sin(inc*pi/180.0);cosinc = cos(inc*pi/180.0);sinomega = sin(omega*pi/180.0);cosomega = cos(omega*pi/180.0);heli_C_peri = [+cosLAN*cosomega-sinLAN*sinomega*cosinc ...                  -cosLAN*sinomega-sinLAN*cosomega*cosinc ...                      +sinLAN*sininc; ...              +sinLAN*cosomega+cosLAN*sinomega*cosinc ...                  -sinLAN*sinomega+cosLAN*cosomega*cosinc ...                      -cosLAN*sininc; ...                     +sinomega*sininc ...                  +cosomega*sininc ...                      +cosinc];O_r_P__heli = heli_C_peri*O_r_P__peri;heli_v_P__heli = heli_C_peri*peri_v_P__peri; % because heli_omega_peri = 0end % terminates MATLAB function